// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftOS.DAL.Context;

#nullable disable

namespace SoftOS.DAL.Micrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("EmpresaProfissional", b =>
                {
                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProfissionalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmpresaId", "ProfissionalId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("EmpresaProfissional");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cnpj")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrdemServicolId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Ticketid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cep = "",
                            Cidade = "",
                            Email = "cliente@greendoc.com",
                            Endereco = "",
                            Estado = "",
                            IsActive = true,
                            Login = "greendoc",
                            Nome = "Greendoc",
                            Pais = "Brasil",
                            Senha = "two/JYZI3+FnGbeuwQna26kgy6mruDsrKemTcrYTFuE0dfeNcm8scPLRtiYRSz0q",
                            Telefone = "81999999999",
                            Tipo = 1
                        });
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Empresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cnpj")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cpf")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrdemServicoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfissionalId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Cep = "",
                            Cidade = "Maceió",
                            ClienteId = 0,
                            Email = "softdotpro@softdotpro.com",
                            Endereco = "",
                            Estado = "AL",
                            Nome = "SoftDotPro",
                            OrdemServicoId = 0,
                            Pais = "",
                            ProfissionalId = 0,
                            Telefone = "81999493640",
                            TicketId = 0
                        });
                });

            modelBuilder.Entity("SoftOS.BLL.Models.OrdemServico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("strftime('%Y-%m-%d %H:%M:%f', 'now')");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Historico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProfissionalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoServicoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("ProfissionalId");

                    b.HasIndex("TipoServicoId");

                    b.ToTable("OrdensServicos");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Profissional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cargo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("strftime('%Y-%m-%d %H:%M:%f', 'now')");

                    b.Property<DateTime?>("DataDesativacao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Guid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Profissionais");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Cargo = 3,
                            Cpf = "",
                            DataCriacao = new DateTime(2025, 7, 30, 8, 59, 0, 765, DateTimeKind.Local).AddTicks(5563),
                            Email = "profissional1@softdotpro.com",
                            Guid = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            Login = "profissional1",
                            Nome = "Profissional Hum",
                            Senha = "cFkpQwgRcBu2nsQ7y88E4OboLAWdoxiZuII9WIfyTskV9yymi180dBcru1mYwFuB",
                            Telefone = "81984927181"
                        });
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DataConclusao")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("strftime('%Y-%m-%d %H:%M:%f', 'now')");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdemServicoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProfissionalId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Situacao")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EmpresaId");

                    b.HasIndex("OrdemServicoId");

                    b.HasIndex("ProfissionalId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.TipoServico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TipoServicos");
                });

            modelBuilder.Entity("EmpresaProfissional", b =>
                {
                    b.HasOne("SoftOS.BLL.Models.Empresa", null)
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftOS.BLL.Models.Profissional", null)
                        .WithMany()
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Cliente", b =>
                {
                    b.HasOne("SoftOS.BLL.Models.Empresa", "Empresa")
                        .WithMany("Cliente")
                        .HasForeignKey("EmpresaId");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.OrdemServico", b =>
                {
                    b.HasOne("SoftOS.BLL.Models.Cliente", null)
                        .WithMany("OrdemServico")
                        .HasForeignKey("ClienteId");

                    b.HasOne("SoftOS.BLL.Models.Empresa", "Empresa")
                        .WithMany("OrdemServico")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftOS.BLL.Models.Profissional", "Profissional")
                        .WithMany("OrdensServico")
                        .HasForeignKey("ProfissionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftOS.BLL.Models.TipoServico", "TipoServico")
                        .WithMany()
                        .HasForeignKey("TipoServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("Profissional");

                    b.Navigation("TipoServico");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Ticket", b =>
                {
                    b.HasOne("SoftOS.BLL.Models.Cliente", "Cliente")
                        .WithMany("Ticket")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftOS.BLL.Models.Empresa", "Empresa")
                        .WithMany("Ticket")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftOS.BLL.Models.OrdemServico", "OrdemServico")
                        .WithMany("Ticket")
                        .HasForeignKey("OrdemServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftOS.BLL.Models.Profissional", "Profissional")
                        .WithMany("Tickets")
                        .HasForeignKey("ProfissionalId");

                    b.Navigation("Cliente");

                    b.Navigation("Empresa");

                    b.Navigation("OrdemServico");

                    b.Navigation("Profissional");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Cliente", b =>
                {
                    b.Navigation("OrdemServico");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Empresa", b =>
                {
                    b.Navigation("Cliente");

                    b.Navigation("OrdemServico");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.OrdemServico", b =>
                {
                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SoftOS.BLL.Models.Profissional", b =>
                {
                    b.Navigation("OrdensServico");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
